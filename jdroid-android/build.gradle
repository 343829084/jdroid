apply plugin: 'com.jdroid.android.library'

ext.projectName = 'Jdroid Android'
description = 'Jdroid dependency project for Android apps'

repositories {
	maven {
		url 'https://maven.fabric.io/public'
	}
}

buildscript {

	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.jdroidframework:jdroid-gradle-plugin:' + project.version
	}
}

configurations {
	compile.exclude group: "org.apache.httpcomponents",  module: "httpclient"
	compile.exclude group: "org.slf4j",  module: "slf4j-api"
}

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {

	// https://github.com/nostra13/Android-Universal-Image-Loader
	compile 'com.nostra13.universalimageloader:universal-image-loader:1.9.4'

	compile 'org.slf4j:slf4j-android:1.6.1-RC1'

	// https://twittersdk.artifactoryonline.com/twittersdk/public/com/crashlytics/sdk/android/crashlytics/
	compile('com.crashlytics.sdk.android:crashlytics:2.3.2@aar') {
		transitive = true
	}

	compile 'com.android.support:support-v4:22.2.0'
	compile 'com.android.support:design:22.2.0'
	compile 'com.android.support:recyclerview-v7:22.2.0'
	compile 'com.android.support:appcompat-v7:22.2.0'
	compile 'com.android.support:cardview-v7:22.2.0'
	compile 'com.android.support:multidex:1.0.1'

	compile 'com.google.android.gms:play-services-ads:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-analytics:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-appinvite:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-base:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-gcm:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-identity:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-location:' + googlePlayServicesVersion
	compile 'com.google.android.gms:play-services-plus:' + googlePlayServicesVersion

	// https://github.com/facebook/device-year-class
	compile 'com.facebook.device.yearclass:yearclass:1.0.1'

	// Module dependencies
	compile project(':jdroid-java')
	compile project(':jdroid-java-http-apache')

	testCompile 'junit:junit:4.12'
	testCompile "org.mockito:mockito-all:1.10.19"

	// https://github.com/robolectric/robolectric
	testCompile('org.robolectric:robolectric:2.4') {
		exclude module: 'classworlds'
		exclude module: 'commons-logging'
		exclude module: 'httpclient'
		exclude module: 'maven-artifact'
		exclude module: 'maven-artifact-manager'
		exclude module: 'maven-error-diagnostics'
		exclude module: 'maven-model'
		exclude module: 'maven-project'
		exclude module: 'maven-settings'
		exclude module: 'plexus-container-default'
		exclude module: 'plexus-interpolation'
		exclude module: 'plexus-utils'
		exclude module: 'wagon-file'
		exclude module: 'wagon-http-lightweight'
		exclude module: 'wagon-provider-api'
	}
}

jdroid {
	notDefaultLanguages = ['es']
}

android {

	lintOptions {
		disable 'ContentDescription', 'RtlEnabled', 'RtlHardcoded', 'RtlSymmetry', 'UseCompoundDrawables', 'UnknownIdInLayout'
	}

	// TODO We will publish the debug version until we discover how to publish both debug and release
	//publishNonDefault true
	defaultPublishConfig "debug"

	sourceSets.test.java.srcDirs += "build/generated/source/r/debug"
	sourceSets.test.java.srcDirs += sourceSets.main.java.srcDirs
	sourceSets.test.java.srcDirs += sourceSets.debug.java.srcDirs
}

task androidSourcesJar(type: Jar) {
	classifier = 'sources'
	from android.sourceSets.main.java.sourceFiles, android.sourceSets.debug.java.sourceFiles
}

artifacts {
	archives androidSourcesJar
}
