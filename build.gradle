// Top-level build file where you can add configuration options common to all sub-projects/modules.

allprojects {

	buildscript {
		repositories {
			mavenCentral()
			if (project.hasProperty('LOCAL_MAVEN_REPO')) {
				maven {
					url LOCAL_MAVEN_REPO
				}
			}
			maven {
				url "https://oss.sonatype.org/content/repositories/snapshots/"
			}
		}
	}

    repositories {
        mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		String extraMavenRepo = project.getProp('EXTRA_MAVEN_REPO')
		if (extraMavenRepo != null) {
			maven {
				url extraMavenRepo
			}
		}
    }
}

group = 'com.jdroidframework'
version = '0.7.0-SNAPSHOT'

subprojects {

	apply plugin: 'maven'
	apply plugin: 'signing'

	ext.projectName = null

	group = rootProject.group
	version = rootProject.version

	afterEvaluate {
		uploadArchives {
			repositories {
				mavenDeployer {

					beforeDeployment { MavenDeployment deployment ->
						signing.signPom(deployment)
					}

					def localUpload = getProp('LOCAL_UPLOAD')
					if (localUpload != null && localUpload == 'true') {
						repository(url: uri(getProp('LOCAL_MAVEN_REPO')))
					} else {
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
						}
						snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
							authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
						}
					}

					pom.project {
						name project.ext.projectName
						description project.description
						inceptionYear '2011'
						organization {
							name 'Jdroid'
							url 'http://www.jdroidframework.com'
						}
						licenses {
							license {
								name 'The Apache License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						developers {
							developer {
								name 'Maxi Rosson'
								email 'jdroidsoft@gmail.com'
								roles {
									role 'architect'
									role 'developer'
								}
							}
						}
						scm {
							connection 'scm:git:git@github.com:maxirosson/jdroid.git'
							developerConnection 'scm:git:git@github.com:maxirosson/jdroid.git'
							url 'git@github.com:maxirosson/jdroid.git'
						}
						issueManagement {
							system 'GitHub'
							url 'https://github.com/maxirosson/jdroid/issues'
						}
					}
				}
			}
		}
	}

	signing {
		required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
		sign configurations.archives
	}
}

def isReleaseBuild() {
	return project.version.contains("SNAPSHOT") == false
}

def getRepositoryUsername() {
	return getProp('NEXUS_USERNAME')
}

def getRepositoryPassword() {
	getProp('NEXUS_PASSWORD')
}

public def getProp(String propertyName) {
	return project.hasProperty(propertyName) ? project.ext.get(propertyName) : System.getenv(propertyName)
}


