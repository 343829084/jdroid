import com.jdroid.github.IRepositoryIdProvider;
import com.jdroid.github.Milestone;
import com.jdroid.github.Release;
import com.jdroid.github.RepositoryId;
import com.jdroid.github.client.GitHubClient;
import com.jdroid.github.service.MilestoneService;
import com.jdroid.github.service.ReleaseService;

// Top-level build file where you can add configuration options common to all sub-projects/modules.

allprojects {

	buildscript {
		repositories {
			mavenCentral()
			if (project.hasProperty('LOCAL_MAVEN_REPO')) {
				maven {
					url LOCAL_MAVEN_REPO
				}
			}
			maven {
				url "https://oss.sonatype.org/content/repositories/snapshots/"
			}
		}
	}

    repositories {
        mavenCentral()
		maven {
			url "https://oss.sonatype.org/content/repositories/snapshots/"
		}
		String extraMavenRepo = project.getProp('EXTRA_MAVEN_REPO')
		if (extraMavenRepo != null) {
			maven {
				url extraMavenRepo
			}
		}
    }
}

buildscript {

	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'com.jdroidframework:jdroid-java-github-connector:0.9.0'
	}
}

group = 'com.jdroidframework'

Integer versionMajor = 0
Integer versionMinor = 9
Integer versionPatch = 2
Boolean isSnapshot = getBooleanProp('SNAPSHOT', true)

version = "${versionMajor}.${versionMinor}.${versionPatch}"
if (isSnapshot) {
	version = "${version}-SNAPSHOT"
}

ext.jdroidVersion = project.version

// https://developers.google.com/android/guides/releases
ext.googlePlayServicesVersion = '8.3.0'

// http://developer.android.com/tools/support-library/index.html
ext.androidSupportVersion = '23.1.1'

ext.packaging = null

subprojects {

	apply plugin: 'maven'
	apply plugin: 'signing'

	ext.projectName = null

	group = rootProject.group
	version = rootProject.version

	afterEvaluate {
		uploadArchives {
			repositories {
				mavenDeployer {

					beforeDeployment { MavenDeployment deployment ->
						signing.signPom(deployment)
					}

					def localUpload = getProp('LOCAL_UPLOAD')
					if (localUpload != null && localUpload == 'true') {
						repository(url: uri(getProp('LOCAL_MAVEN_REPO')))
					} else {
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
						}
						snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
							authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
						}
					}

					pom.project {
						name project.ext.projectName
						description project.description
						packaging project.packaging
						url 'http://www.jdroidframework.com'
						inceptionYear '2011'
						organization {
							name 'Jdroid'
							url 'http://www.jdroidframework.com'
						}
						licenses {
							license {
								name 'The Apache License, Version 2.0'
								url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
								distribution 'repo'
							}
						}
						developers {
							developer {
								name 'Maxi Rosson'
								email 'jdroidsoft@gmail.com'
								roles {
									role 'architect'
									role 'developer'
								}
							}
						}
						scm {
							connection 'scm:git:git@github.com:maxirosson/jdroid.git'
							developerConnection 'scm:git:git@github.com:maxirosson/jdroid.git'
							url 'git@github.com:maxirosson/jdroid.git'
						}
						issueManagement {
							system 'GitHub'
							url 'https://github.com/maxirosson/jdroid/issues'
						}
					}
				}
			}
		}
	}

	if (getBooleanProp('SIGNING_ENABLED', true)) {
		signing {
			required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
			sign configurations.archives
		}
	}
}

def getRepositoryUsername() {
	return getProp('NEXUS_USERNAME')
}

def getRepositoryPassword() {
	getProp('NEXUS_PASSWORD')
}

public def getProp(String propertyName) {
	return project.hasProperty(propertyName) ? project.ext.get(propertyName) : System.getenv(propertyName)
}

public Boolean getBooleanProp(String propertyName, Boolean defaultValue) {
    def value = getProp(propertyName)
	if (value == null) {
		return defaultValue
	} else if (value == 'true') {
		return true
	} else {
		return false
	}
}

task printVersion << {
	println version
}

task closeGitHubMilestone << {

	GitHubClient client = new com.jdroid.github.client.GitHubClient();
	client.setSerializeNulls(false);
	client.setOAuth2Token(getProp('GITHUB_OATH_TOKEN'));

	IRepositoryIdProvider repositoryIdProvider = RepositoryId.create("maxirosson", "jdroid");

	closeMilestone(client, repositoryIdProvider, "v${version}");
}


public void closeMilestone(GitHubClient client, IRepositoryIdProvider repositoryIdProvider, String milestoneTitle) throws IOException {

	MilestoneService milestoneService = new MilestoneService(client);
	for (Milestone each : milestoneService.getMilestones(repositoryIdProvider, "open")) {
		if (each.getTitle().equals(milestoneTitle)) {

			Milestone newMilestone = new Milestone();
			newMilestone.setNumber(each.getNumber());
			newMilestone.setTitle(each.getTitle());
			newMilestone.setDescription(each.getDescription());
			newMilestone.setDueOn(new Date());
			newMilestone.setState("closed");
			milestoneService.editMilestone(repositoryIdProvider, newMilestone);
			break;
		}
	}
}

task createGitHubRelease << {
	GitHubClient client = new GitHubClient();
	client.setSerializeNulls(false);
	client.setOAuth2Token(getProp('GITHUB_OATH_TOKEN'));

	IRepositoryIdProvider repositoryIdProvider = RepositoryId.create("maxirosson", "jdroid");

	def releaseNotesFile = project.file("./etc/releaseNotes.txt")

	createRelease(client, repositoryIdProvider, "v${version}", releaseNotesFile.getText());
}

public void createRelease(GitHubClient client, IRepositoryIdProvider repositoryIdProvider, String name, String body) throws IOException {

	Release release = new Release();
	release.setBody(body);
	release.setDraft(false);
	release.setName(name);
	release.setTagName(name);
	release.setPrerelease(false);
	release.setTargetCommitish("production");

	ReleaseService releaseService = new ReleaseService(client);
	releaseService.createRelease(repositoryIdProvider, release);
}


