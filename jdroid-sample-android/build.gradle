apply plugin: 'com.jdroid.android.application'
apply plugin: 'jacoco'

description = 'Jdroid Sample Android'

repositories {
	mavenCentral()
	maven {
		url "http://download.crashlytics.com/maven"
	}

}

buildscript {
	repositories {
		mavenCentral()
	}
}

buildscript {
	dependencies {
		classpath 'com.jdroidframework:jdroid-gradle-plugin:' + project.version
	}
}

configurations.all {
	// check for updates every build
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
	compile project(':jdroid-android')
//  compile 'com.jdroidframework:jdroid-android:0.7.0-SNAPSHOT'
//	compile 'com.jdroidframework:jdroid-android:0.7.0-SNAPSHOT:debug'
//	releaseCompile 'com.jdroidframework:jdroid-android:0.7.0-SNAPSHOT:release'

	testCompile 'junit:junit:4.12'
	testCompile "org.mockito:mockito-core:1.9.5"
	testCompile('org.robolectric:robolectric:2.4') {
		exclude module: 'classworlds'
		exclude module: 'commons-logging'
		exclude module: 'httpclient'
		exclude module: 'maven-artifact'
		exclude module: 'maven-artifact-manager'
		exclude module: 'maven-error-diagnostics'
		exclude module: 'maven-model'
		exclude module: 'maven-project'
		exclude module: 'maven-settings'
		exclude module: 'plexus-container-default'
		exclude module: 'plexus-interpolation'
		exclude module: 'plexus-utils'
		exclude module: 'wagon-file'
		exclude module: 'wagon-http-lightweight'
		exclude module: 'wagon-provider-api'
	}
}

jdroid {

	versionMajor = 0
	versionMinor = 8
	versionPatch = 0

	notDefaultLanguages = ['es']
}

android {

	defaultConfig {

		versionCode 140000000 + jdroid.versionMajor * 10000 + jdroid.versionMinor * 100 + jdroid.versionPatch
		versionName "${jdroid.versionMajor}.${jdroid.versionMinor}.${jdroid.versionPatch}"

		applicationVariants.all { variant ->

			variant.outputs.each { output ->
				def outputFile = output.outputFile
				if (outputFile != null && outputFile.name.endsWith('.apk')) {
					def fileName = outputFile.name.replace('.apk', "-v${versionName}.apk")
					output.outputFile = new File(outputFile.parent, fileName)
				}
			}
		}

		// Common
		jdroid.setString(defaultConfig, "BUILD_TIME", jdroid.getBuildTime())
		jdroid.setString(defaultConfig, "GIT_SHA", jdroid.getGitSha())
		jdroid.setString(defaultConfig, "GIT_BRANCH", jdroid.getGitBranch())

		jdroid.setBoolean(defaultConfig, "GOOGLE_ANALYTICS_ENABLED", true)
		jdroid.setString(defaultConfig, "GOOGLE_ANALYTICS_TRACKING_ID", "UA-9898638-5")
		jdroid.setBoolean(defaultConfig, "GOOGLE_ANALYTICS_DEBUG_ENABLED", true)

		// TODO Add GOOGLE_PROJECT_ID
		jdroid.setString(defaultConfig, "GOOGLE_PROJECT_ID", "????????")
		// TODO Add FACEBOOK_APP_ID
		jdroid.setString(defaultConfig, "FACEBOOK_APP_ID", "????????")


		jdroid.setBoolean(defaultConfig, "CRASHLYTICS_ENABLED", true)
		jdroid.setBoolean(defaultConfig, "CRASHLYTICS_DEBUG_ENABLED", true)


		jdroid.setString(defaultConfig, "LOCAL_IP", null)

		jdroid.setString(defaultConfig, "INSTALLATION_SOURCE", "GooglePlay")

		jdroid.setBoolean(defaultConfig, "ADS_ENABLED", true)
		jdroid.setString(defaultConfig, "AD_UNIT_ID", "ca-app-pub-4654922738884963/8672724544")
		jdroid.setString(defaultConfig, "ADS_TEST_DEVICES_IDS", null)

		jdroid.setString(defaultConfig, "GOOGLE_PLAY_PUBLIC_KEY", null)

		manifestPlaceholders = [googleMapsApiKey: "AIzaSyDhgOTyv5EqcYckAnPI1Cdms-1DxBYhjjA", crashlyticsApiKey: "478dae49374362f33bc054fc44d1f4242c574ccb"]
	}

	signingConfigs {

		debug {
			storeFile file('./debug.keystore')
		}

		release {
			// TODO
		}
	}

	buildTypes {

		debug {
			signingConfig signingConfigs.debug

			jdroid.setBoolean(buildTypes.debug, "CRASHLYTICS_ENABLED", false)
			jdroid.setString(buildTypes.debug, "SERVER_NAME", "DEV")

			testCoverageEnabled = true
		}

		uat {
			signingConfig signingConfigs.debug

			debuggable true

			jdroid.setString(buildTypes.uat, "SERVER_NAME", "UAT")

		}

		release {

			signingConfig signingConfigs.release

			jdroid.setBoolean(buildTypes.release, "GOOGLE_ANALYTICS_DEBUG_ENABLED", false)
			jdroid.setBoolean(buildTypes.release, "CRASHLYTICS_DEBUG_ENABLED", false)

			jdroid.setString(buildTypes.release, "SERVER_NAME", "PROD")

			// TODO Add GOOGLE_PLAY_PUBLIC_KEY

			// TODO Add GOOGLE_ANALYTICS_TRACKING_ID
			// TODO Add FACEBOOK_APP_ID
			// TODO Add manifestPlaceholders = [googleMapsApiKey,crashlyticsApiKey

		}
	}

	sourceSets.uat {
		java.srcDirs = ['src/debug/java']
		resources.srcDirs = ['src/debug/resources']
	}

	sourceSets.test.java.srcDirs += "build/generated/source/r/debug"
	sourceSets.test.java.srcDirs += sourceSets.main.java.srcDirs
	sourceSets.test.java.srcDirs += sourceSets.debug.java.srcDirs
}

tasks.withType(Test) {
	scanForTestClasses = true

	def integrationTestsEnabled = jdroid.getProp('INTEGRATION_TESTS_ENABLED', 'true')
	if (integrationTestsEnabled != 'true') {
		exclude "**/integration/**/*Test.class"
	}
}
